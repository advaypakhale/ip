import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class Storage {
    private final String filePath;
    private final TaskList tasks;

    public Storage(String filePath, TaskList tasks) {
        this.filePath = filePath;
        this.tasks = tasks;
    }

    // Generated by Claude
    public void save() throws IOException {
        Path path = Path.of(filePath);
        Files.createDirectories(path.getParent());

        List<String> lines = new ArrayList<>();
        for (Task task : tasks) {
            lines.add(task.toFileString());
        }

        Files.write(path, lines, StandardOpenOption.CREATE,
                                StandardOpenOption.TRUNCATE_EXISTING);
    }

    // Generated by Claude
    public TaskList load() throws IOException {
        Path path = Path.of(filePath);

        if (!Files.exists(path)) {
            return new TaskList();
        }

        List<String> lines = Files.readAllLines(path);
        TaskList loadedTasks = new TaskList();

        for (String line : lines) {
            String[] parts = line.split(" \\| ");
            if (parts.length < 3) {
                continue;
            }

            String type = parts[0];
            boolean isComplete = parts[1].equals("Y");
            String description = parts[2];

            Task task = switch (type) {
                case "T" -> new Todo(description);
                case "D" -> new Deadline(description, parts[3]);
                case "E" -> new Event(description, parts[3], parts[4]);
                default -> null;
            };

            if (task != null) {
                if (isComplete) {
                    task.markAsDone();
                }
                loadedTasks.addTask(task);
            }
        }

        return loadedTasks;
    }
}
